// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: api/app/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	App_TestSign_FullMethodName               = "/api.app.v1.App/TestSign"
	App_EthAuthorize_FullMethodName           = "/api.app.v1.App/EthAuthorize"
	App_UserInfo_FullMethodName               = "/api.app.v1.App/UserInfo"
	App_UserRecommend_FullMethodName          = "/api.app.v1.App/UserRecommend"
	App_UserRecommendL_FullMethodName         = "/api.app.v1.App/UserRecommendL"
	App_UserLand_FullMethodName               = "/api.app.v1.App/UserLand"
	App_UserStakeGitRewardList_FullMethodName = "/api.app.v1.App/UserStakeGitRewardList"
	App_UserStakeGitStakeList_FullMethodName  = "/api.app.v1.App/UserStakeGitStakeList"
	App_UserBoxList_FullMethodName            = "/api.app.v1.App/UserBoxList"
	App_UserBackList_FullMethodName           = "/api.app.v1.App/UserBackList"
	App_UserMarketSeedList_FullMethodName     = "/api.app.v1.App/UserMarketSeedList"
	App_UserMarketLandList_FullMethodName     = "/api.app.v1.App/UserMarketLandList"
	App_UserMarketPropList_FullMethodName     = "/api.app.v1.App/UserMarketPropList"
	App_UserMarketRentLandList_FullMethodName = "/api.app.v1.App/UserMarketRentLandList"
	App_UserMyMarketList_FullMethodName       = "/api.app.v1.App/UserMyMarketList"
	App_UserNoticeList_FullMethodName         = "/api.app.v1.App/UserNoticeList"
	App_UserStakeRewardList_FullMethodName    = "/api.app.v1.App/UserStakeRewardList"
	App_UserIndexList_FullMethodName          = "/api.app.v1.App/UserIndexList"
	App_UserOrderList_FullMethodName          = "/api.app.v1.App/UserOrderList"
	App_Withdraw_FullMethodName               = "/api.app.v1.App/Withdraw"
	App_Exchange_FullMethodName               = "/api.app.v1.App/Exchange"
	App_GetLand_FullMethodName                = "/api.app.v1.App/GetLand"
	App_StakeGit_FullMethodName               = "/api.app.v1.App/StakeGit"
	App_BuyBox_FullMethodName                 = "/api.app.v1.App/BuyBox"
	App_OpenBox_FullMethodName                = "/api.app.v1.App/OpenBox"
	App_Sell_FullMethodName                   = "/api.app.v1.App/Sell"
	App_Buy_FullMethodName                    = "/api.app.v1.App/Buy"
	App_RentLand_FullMethodName               = "/api.app.v1.App/RentLand"
	App_LandAddOutRate_FullMethodName         = "/api.app.v1.App/LandAddOutRate"
	App_StakeGet_FullMethodName               = "/api.app.v1.App/StakeGet"
	App_StakeGetPlay_FullMethodName           = "/api.app.v1.App/StakeGetPlay"
	App_LandPlay_FullMethodName               = "/api.app.v1.App/LandPlay"
	App_LandPlayOne_FullMethodName            = "/api.app.v1.App/LandPlayOne"
	App_LandPlayTwo_FullMethodName            = "/api.app.v1.App/LandPlayTwo"
	App_LandPlayThree_FullMethodName          = "/api.app.v1.App/LandPlayThree"
	App_LandPlayFour_FullMethodName           = "/api.app.v1.App/LandPlayFour"
	App_LandPlayFive_FullMethodName           = "/api.app.v1.App/LandPlayFive"
	App_LandPlaySix_FullMethodName            = "/api.app.v1.App/LandPlaySix"
	App_LandPlaySeven_FullMethodName          = "/api.app.v1.App/LandPlaySeven"
	App_SetGiw_FullMethodName                 = "/api.app.v1.App/SetGiw"
	App_SetGit_FullMethodName                 = "/api.app.v1.App/SetGit"
	App_SetLand_FullMethodName                = "/api.app.v1.App/SetLand"
	App_AdminLogin_FullMethodName             = "/api.app.v1.App/AdminLogin"
	App_AdminUserList_FullMethodName          = "/api.app.v1.App/AdminUserList"
	App_AdminUserBuy_FullMethodName           = "/api.app.v1.App/AdminUserBuy"
	App_AdminUserLand_FullMethodName          = "/api.app.v1.App/AdminUserLand"
	App_AdminRewardListTwo_FullMethodName     = "/api.app.v1.App/AdminRewardListTwo"
	App_AdminRewardList_FullMethodName        = "/api.app.v1.App/AdminRewardList"
	App_AdminUserBackList_FullMethodName      = "/api.app.v1.App/AdminUserBackList"
	App_AdminUserRecommend_FullMethodName     = "/api.app.v1.App/AdminUserRecommend"
	App_AdminDeposit_FullMethodName           = "/api.app.v1.App/AdminDeposit"
	App_AdminDepositUsdt_FullMethodName       = "/api.app.v1.App/AdminDepositUsdt"
	App_AdminDepositUsdtTwo_FullMethodName    = "/api.app.v1.App/AdminDepositUsdtTwo"
	App_AdminWithdraw_FullMethodName          = "/api.app.v1.App/AdminWithdraw"
	App_AdminDaily_FullMethodName             = "/api.app.v1.App/AdminDaily"
	App_AdminDailyReward_FullMethodName       = "/api.app.v1.App/AdminDailyReward"
	App_AdminPriceChange_FullMethodName       = "/api.app.v1.App/AdminPriceChange"
	App_AdminWithdrawList_FullMethodName      = "/api.app.v1.App/AdminWithdrawList"
	App_AdminRecordList_FullMethodName        = "/api.app.v1.App/AdminRecordList"
	App_AdminLandConfigList_FullMethodName    = "/api.app.v1.App/AdminLandConfigList"
	App_AdminLandConfigSet_FullMethodName     = "/api.app.v1.App/AdminLandConfigSet"
	App_AdminSeedConfigList_FullMethodName    = "/api.app.v1.App/AdminSeedConfigList"
	App_AdminSeedConfigSet_FullMethodName     = "/api.app.v1.App/AdminSeedConfigSet"
	App_AdminPropConfigList_FullMethodName    = "/api.app.v1.App/AdminPropConfigList"
	App_AdminPropConfigSet_FullMethodName     = "/api.app.v1.App/AdminPropConfigSet"
	App_AdminSetGiw_FullMethodName            = "/api.app.v1.App/AdminSetGiw"
	App_AdminSetGit_FullMethodName            = "/api.app.v1.App/AdminSetGit"
	App_AdminSetUsdt_FullMethodName           = "/api.app.v1.App/AdminSetUsdt"
	App_AdminGetBox_FullMethodName            = "/api.app.v1.App/AdminGetBox"
	App_AdminSetBox_FullMethodName            = "/api.app.v1.App/AdminSetBox"
	App_AdminGetConfig_FullMethodName         = "/api.app.v1.App/AdminGetConfig"
	App_AdminSetConfig_FullMethodName         = "/api.app.v1.App/AdminSetConfig"
	App_AdminSetLand_FullMethodName           = "/api.app.v1.App/AdminSetLand"
	App_AdminSetProp_FullMethodName           = "/api.app.v1.App/AdminSetProp"
	App_AdminSetSeed_FullMethodName           = "/api.app.v1.App/AdminSetSeed"
	App_AdminSetBuyLand_FullMethodName        = "/api.app.v1.App/AdminSetBuyLand"
)

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	TestSign(ctx context.Context, in *TestSignRequest, opts ...grpc.CallOption) (*TestSignReply, error)
	EthAuthorize(ctx context.Context, in *EthAuthorizeRequest, opts ...grpc.CallOption) (*EthAuthorizeReply, error)
	// 用户信息
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error)
	// 直推列表
	UserRecommend(ctx context.Context, in *UserRecommendRequest, opts ...grpc.CallOption) (*UserRecommendReply, error)
	// L1L2L3内容
	UserRecommendL(ctx context.Context, in *UserRecommendLRequest, opts ...grpc.CallOption) (*UserRecommendLReply, error)
	// 土地背包列表
	UserLand(ctx context.Context, in *UserLandRequest, opts ...grpc.CallOption) (*UserLandReply, error)
	// 粮仓列表
	UserStakeGitRewardList(ctx context.Context, in *UserStakeGitRewardListRequest, opts ...grpc.CallOption) (*UserStakeGitRewardListReply, error)
	// 粮仓列表
	UserStakeGitStakeList(ctx context.Context, in *UserStakeGitStakeListRequest, opts ...grpc.CallOption) (*UserStakeGitStakeListReply, error)
	// 盲盒列表
	UserBoxList(ctx context.Context, in *UserBoxListRequest, opts ...grpc.CallOption) (*UserBoxListReply, error)
	// 仓库
	UserBackList(ctx context.Context, in *UserBackListRequest, opts ...grpc.CallOption) (*UserBackListReply, error)
	// 市场 种子
	UserMarketSeedList(ctx context.Context, in *UserMarketSeedListRequest, opts ...grpc.CallOption) (*UserMarketSeedListReply, error)
	// 市场 土地
	UserMarketLandList(ctx context.Context, in *UserMarketLandListRequest, opts ...grpc.CallOption) (*UserMarketLandListReply, error)
	// 市场 道具
	UserMarketPropList(ctx context.Context, in *UserMarketPropListRequest, opts ...grpc.CallOption) (*UserMarketPropListReply, error)
	// 市场 出租
	UserMarketRentLandList(ctx context.Context, in *UserMarketRentLandListRequest, opts ...grpc.CallOption) (*UserMarketRentLandListReply, error)
	// 市场 我的
	UserMyMarketList(ctx context.Context, in *UserMyMarketListRequest, opts ...grpc.CallOption) (*UserMyMarketListReply, error)
	// 通知
	UserNoticeList(ctx context.Context, in *UserNoticeListRequest, opts ...grpc.CallOption) (*UserNoticeListReply, error)
	// 果实放大器 获奖记录
	UserStakeRewardList(ctx context.Context, in *UserStakeRewardListRequest, opts ...grpc.CallOption) (*UserStakeRewardListReply, error)
	// 首页
	UserIndexList(ctx context.Context, in *UserIndexListRequest, opts ...grpc.CallOption) (*UserIndexListReply, error)
	// 排行榜
	UserOrderList(ctx context.Context, in *UserOrderListRequest, opts ...grpc.CallOption) (*UserOrderListReply, error)
	// 提现
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error)
	// 兑换
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error)
	// 合成土地
	GetLand(ctx context.Context, in *GetLandRequest, opts ...grpc.CallOption) (*GetLandReply, error)
	// 粮仓的质押和赎回
	StakeGit(ctx context.Context, in *StakeGitRequest, opts ...grpc.CallOption) (*StakeGitReply, error)
	// 购买盲盒
	BuyBox(ctx context.Context, in *BuyBoxRequest, opts ...grpc.CallOption) (*BuyBoxReply, error)
	// 开盲盒
	OpenBox(ctx context.Context, in *OpenBoxRequest, opts ...grpc.CallOption) (*OpenBoxReply, error)
	// 出售道具下架道具
	Sell(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*SellReply, error)
	// 购买道具
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyReply, error)
	// 出租土地结束出租
	RentLand(ctx context.Context, in *RentLandRequest, opts ...grpc.CallOption) (*RentLandReply, error)
	// 培育
	LandAddOutRate(ctx context.Context, in *LandAddOutRateRequest, opts ...grpc.CallOption) (*LandAddOutRateReply, error)
	// 放大器质押解压
	StakeGet(ctx context.Context, in *StakeGetRequest, opts ...grpc.CallOption) (*StakeGetReply, error)
	// 放大器游戏
	StakeGetPlay(ctx context.Context, in *StakeGetPlayRequest, opts ...grpc.CallOption) (*StakeGetPlayReply, error)
	// 土地替换，收回
	LandPlay(ctx context.Context, in *LandPlayRequest, opts ...grpc.CallOption) (*LandPlayReply, error)
	// 种植和出租的种植
	LandPlayOne(ctx context.Context, in *LandPlayOneRequest, opts ...grpc.CallOption) (*LandPlayOneReply, error)
	// 收成熟植物和出租的
	LandPlayTwo(ctx context.Context, in *LandPlayTwoRequest, opts ...grpc.CallOption) (*LandPlayTwoReply, error)
	// 施肥和出租的
	LandPlayThree(ctx context.Context, in *LandPlayThreeRequest, opts ...grpc.CallOption) (*LandPlayThreeReply, error)
	// 杀虫和出租的
	LandPlayFour(ctx context.Context, in *LandPlayFourRequest, opts ...grpc.CallOption) (*LandPlayFourReply, error)
	// 浇水和出租的
	LandPlayFive(ctx context.Context, in *LandPlayFiveRequest, opts ...grpc.CallOption) (*LandPlayFiveReply, error)
	// 铲子铲别人
	LandPlaySix(ctx context.Context, in *LandPlaySixRequest, opts ...grpc.CallOption) (*LandPlaySixReply, error)
	// 手套偷别人
	LandPlaySeven(ctx context.Context, in *LandPlaySevenRequest, opts ...grpc.CallOption) (*LandPlaySevenReply, error)
	SetGiw(ctx context.Context, in *SetGiwRequest, opts ...grpc.CallOption) (*SetGiwReply, error)
	SetGit(ctx context.Context, in *SetGitRequest, opts ...grpc.CallOption) (*SetGitReply, error)
	SetLand(ctx context.Context, in *SetLandRequest, opts ...grpc.CallOption) (*SetLandReply, error)
	// 登录
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginReply, error)
	// 用户
	AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListReply, error)
	// 管理认购信息
	AdminUserBuy(ctx context.Context, in *AdminUserBuyRequest, opts ...grpc.CallOption) (*AdminUserBuyReply, error)
	// 管理土地信息
	AdminUserLand(ctx context.Context, in *AdminUserLandRequest, opts ...grpc.CallOption) (*AdminUserLandReply, error)
	// 管理认购收益
	AdminRewardListTwo(ctx context.Context, in *AdminRewardListTwoRequest, opts ...grpc.CallOption) (*AdminRewardListTwoReply, error)
	// 管理游戏收益
	AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...grpc.CallOption) (*AdminRewardListReply, error)
	// 管理仓库
	AdminUserBackList(ctx context.Context, in *AdminUserBackListRequest, opts ...grpc.CallOption) (*AdminUserBackListReply, error)
	// 用户下级
	AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...grpc.CallOption) (*AdminUserRecommendReply, error)
	// 充值处理
	AdminDeposit(ctx context.Context, in *AdminDepositRequest, opts ...grpc.CallOption) (*AdminDepositReply, error)
	// 充值处理
	AdminDepositUsdt(ctx context.Context, in *AdminDepositUsdtRequest, opts ...grpc.CallOption) (*AdminDepositUsdtReply, error)
	// 充值处理
	AdminDepositUsdtTwo(ctx context.Context, in *AdminDepositUsdtTwoRequest, opts ...grpc.CallOption) (*AdminDepositUsdtTwoReply, error)
	// 提现处理
	AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...grpc.CallOption) (*AdminWithdrawReply, error)
	// 每日粮仓
	AdminDaily(ctx context.Context, in *AdminDailyRequest, opts ...grpc.CallOption) (*AdminDailyReply, error)
	// 每日粮仓
	AdminDailyReward(ctx context.Context, in *AdminDailyRewardRequest, opts ...grpc.CallOption) (*AdminDailyRewardReply, error)
	// 每日粮仓
	AdminPriceChange(ctx context.Context, in *AdminPriceChangeRequest, opts ...grpc.CallOption) (*AdminPriceChangeReply, error)
	// 提现
	AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...grpc.CallOption) (*AdminWithdrawListReply, error)
	// 充值
	AdminRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListReply, error)
	// 土地配置
	AdminLandConfigList(ctx context.Context, in *AdminLandConfigRequest, opts ...grpc.CallOption) (*AdminLandConfigReply, error)
	// 设置土地配置
	AdminLandConfigSet(ctx context.Context, in *AdminLandConfigSetRequest, opts ...grpc.CallOption) (*AdminLandConfigSetReply, error)
	// 种子配置
	AdminSeedConfigList(ctx context.Context, in *AdminSeedConfigRequest, opts ...grpc.CallOption) (*AdminSeedConfigReply, error)
	// 设置种子配置
	AdminSeedConfigSet(ctx context.Context, in *AdminSeedConfigSetRequest, opts ...grpc.CallOption) (*AdminSeedConfigSetReply, error)
	// 道具配置
	AdminPropConfigList(ctx context.Context, in *AdminPropConfigRequest, opts ...grpc.CallOption) (*AdminPropConfigReply, error)
	// 设置道具配置
	AdminPropConfigSet(ctx context.Context, in *AdminPropConfigSetRequest, opts ...grpc.CallOption) (*AdminPropConfigSetReply, error)
	// 设置余额
	AdminSetGiw(ctx context.Context, in *AdminSetGiwRequest, opts ...grpc.CallOption) (*AdminSetGiwReply, error)
	// 设置余额
	AdminSetGit(ctx context.Context, in *AdminSetGitRequest, opts ...grpc.CallOption) (*AdminSetGitReply, error)
	// 设置余额
	AdminSetUsdt(ctx context.Context, in *AdminSetUsdtRequest, opts ...grpc.CallOption) (*AdminSetUsdtReply, error)
	// 当前盲盒信息
	AdminGetBox(ctx context.Context, in *AdminGetBoxRequest, opts ...grpc.CallOption) (*AdminGetBoxReply, error)
	// 设置盲盒
	AdminSetBox(ctx context.Context, in *AdminSetBoxRequest, opts ...grpc.CallOption) (*AdminSetBoxReply, error)
	// 获取配置
	AdminGetConfig(ctx context.Context, in *AdminGetConfigRequest, opts ...grpc.CallOption) (*AdminGetConfigReply, error)
	// 修改配置
	AdminSetConfig(ctx context.Context, in *AdminSetConfigRequest, opts ...grpc.CallOption) (*AdminSetConfigReply, error)
	// 发土地
	AdminSetLand(ctx context.Context, in *AdminSetLandRequest, opts ...grpc.CallOption) (*AdminSetLandReply, error)
	// 发道具
	AdminSetProp(ctx context.Context, in *AdminSetPropRequest, opts ...grpc.CallOption) (*AdminSetPropReply, error)
	// 发种子
	AdminSetSeed(ctx context.Context, in *AdminSetSeedRequest, opts ...grpc.CallOption) (*AdminSetSeedReply, error)
	// 上级拍卖行
	AdminSetBuyLand(ctx context.Context, in *AdminSetBuyLandRequest, opts ...grpc.CallOption) (*AdminSetBuyLandReply, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) TestSign(ctx context.Context, in *TestSignRequest, opts ...grpc.CallOption) (*TestSignReply, error) {
	out := new(TestSignReply)
	err := c.cc.Invoke(ctx, App_TestSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) EthAuthorize(ctx context.Context, in *EthAuthorizeRequest, opts ...grpc.CallOption) (*EthAuthorizeReply, error) {
	out := new(EthAuthorizeReply)
	err := c.cc.Invoke(ctx, App_EthAuthorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, App_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserRecommend(ctx context.Context, in *UserRecommendRequest, opts ...grpc.CallOption) (*UserRecommendReply, error) {
	out := new(UserRecommendReply)
	err := c.cc.Invoke(ctx, App_UserRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserRecommendL(ctx context.Context, in *UserRecommendLRequest, opts ...grpc.CallOption) (*UserRecommendLReply, error) {
	out := new(UserRecommendLReply)
	err := c.cc.Invoke(ctx, App_UserRecommendL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserLand(ctx context.Context, in *UserLandRequest, opts ...grpc.CallOption) (*UserLandReply, error) {
	out := new(UserLandReply)
	err := c.cc.Invoke(ctx, App_UserLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserStakeGitRewardList(ctx context.Context, in *UserStakeGitRewardListRequest, opts ...grpc.CallOption) (*UserStakeGitRewardListReply, error) {
	out := new(UserStakeGitRewardListReply)
	err := c.cc.Invoke(ctx, App_UserStakeGitRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserStakeGitStakeList(ctx context.Context, in *UserStakeGitStakeListRequest, opts ...grpc.CallOption) (*UserStakeGitStakeListReply, error) {
	out := new(UserStakeGitStakeListReply)
	err := c.cc.Invoke(ctx, App_UserStakeGitStakeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserBoxList(ctx context.Context, in *UserBoxListRequest, opts ...grpc.CallOption) (*UserBoxListReply, error) {
	out := new(UserBoxListReply)
	err := c.cc.Invoke(ctx, App_UserBoxList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserBackList(ctx context.Context, in *UserBackListRequest, opts ...grpc.CallOption) (*UserBackListReply, error) {
	out := new(UserBackListReply)
	err := c.cc.Invoke(ctx, App_UserBackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserMarketSeedList(ctx context.Context, in *UserMarketSeedListRequest, opts ...grpc.CallOption) (*UserMarketSeedListReply, error) {
	out := new(UserMarketSeedListReply)
	err := c.cc.Invoke(ctx, App_UserMarketSeedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserMarketLandList(ctx context.Context, in *UserMarketLandListRequest, opts ...grpc.CallOption) (*UserMarketLandListReply, error) {
	out := new(UserMarketLandListReply)
	err := c.cc.Invoke(ctx, App_UserMarketLandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserMarketPropList(ctx context.Context, in *UserMarketPropListRequest, opts ...grpc.CallOption) (*UserMarketPropListReply, error) {
	out := new(UserMarketPropListReply)
	err := c.cc.Invoke(ctx, App_UserMarketPropList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserMarketRentLandList(ctx context.Context, in *UserMarketRentLandListRequest, opts ...grpc.CallOption) (*UserMarketRentLandListReply, error) {
	out := new(UserMarketRentLandListReply)
	err := c.cc.Invoke(ctx, App_UserMarketRentLandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserMyMarketList(ctx context.Context, in *UserMyMarketListRequest, opts ...grpc.CallOption) (*UserMyMarketListReply, error) {
	out := new(UserMyMarketListReply)
	err := c.cc.Invoke(ctx, App_UserMyMarketList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserNoticeList(ctx context.Context, in *UserNoticeListRequest, opts ...grpc.CallOption) (*UserNoticeListReply, error) {
	out := new(UserNoticeListReply)
	err := c.cc.Invoke(ctx, App_UserNoticeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserStakeRewardList(ctx context.Context, in *UserStakeRewardListRequest, opts ...grpc.CallOption) (*UserStakeRewardListReply, error) {
	out := new(UserStakeRewardListReply)
	err := c.cc.Invoke(ctx, App_UserStakeRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserIndexList(ctx context.Context, in *UserIndexListRequest, opts ...grpc.CallOption) (*UserIndexListReply, error) {
	out := new(UserIndexListReply)
	err := c.cc.Invoke(ctx, App_UserIndexList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserOrderList(ctx context.Context, in *UserOrderListRequest, opts ...grpc.CallOption) (*UserOrderListReply, error) {
	out := new(UserOrderListReply)
	err := c.cc.Invoke(ctx, App_UserOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error) {
	out := new(WithdrawReply)
	err := c.cc.Invoke(ctx, App_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error) {
	out := new(ExchangeReply)
	err := c.cc.Invoke(ctx, App_Exchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetLand(ctx context.Context, in *GetLandRequest, opts ...grpc.CallOption) (*GetLandReply, error) {
	out := new(GetLandReply)
	err := c.cc.Invoke(ctx, App_GetLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) StakeGit(ctx context.Context, in *StakeGitRequest, opts ...grpc.CallOption) (*StakeGitReply, error) {
	out := new(StakeGitReply)
	err := c.cc.Invoke(ctx, App_StakeGit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) BuyBox(ctx context.Context, in *BuyBoxRequest, opts ...grpc.CallOption) (*BuyBoxReply, error) {
	out := new(BuyBoxReply)
	err := c.cc.Invoke(ctx, App_BuyBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) OpenBox(ctx context.Context, in *OpenBoxRequest, opts ...grpc.CallOption) (*OpenBoxReply, error) {
	out := new(OpenBoxReply)
	err := c.cc.Invoke(ctx, App_OpenBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Sell(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*SellReply, error) {
	out := new(SellReply)
	err := c.cc.Invoke(ctx, App_Sell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyReply, error) {
	out := new(BuyReply)
	err := c.cc.Invoke(ctx, App_Buy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) RentLand(ctx context.Context, in *RentLandRequest, opts ...grpc.CallOption) (*RentLandReply, error) {
	out := new(RentLandReply)
	err := c.cc.Invoke(ctx, App_RentLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandAddOutRate(ctx context.Context, in *LandAddOutRateRequest, opts ...grpc.CallOption) (*LandAddOutRateReply, error) {
	out := new(LandAddOutRateReply)
	err := c.cc.Invoke(ctx, App_LandAddOutRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) StakeGet(ctx context.Context, in *StakeGetRequest, opts ...grpc.CallOption) (*StakeGetReply, error) {
	out := new(StakeGetReply)
	err := c.cc.Invoke(ctx, App_StakeGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) StakeGetPlay(ctx context.Context, in *StakeGetPlayRequest, opts ...grpc.CallOption) (*StakeGetPlayReply, error) {
	out := new(StakeGetPlayReply)
	err := c.cc.Invoke(ctx, App_StakeGetPlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlay(ctx context.Context, in *LandPlayRequest, opts ...grpc.CallOption) (*LandPlayReply, error) {
	out := new(LandPlayReply)
	err := c.cc.Invoke(ctx, App_LandPlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlayOne(ctx context.Context, in *LandPlayOneRequest, opts ...grpc.CallOption) (*LandPlayOneReply, error) {
	out := new(LandPlayOneReply)
	err := c.cc.Invoke(ctx, App_LandPlayOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlayTwo(ctx context.Context, in *LandPlayTwoRequest, opts ...grpc.CallOption) (*LandPlayTwoReply, error) {
	out := new(LandPlayTwoReply)
	err := c.cc.Invoke(ctx, App_LandPlayTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlayThree(ctx context.Context, in *LandPlayThreeRequest, opts ...grpc.CallOption) (*LandPlayThreeReply, error) {
	out := new(LandPlayThreeReply)
	err := c.cc.Invoke(ctx, App_LandPlayThree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlayFour(ctx context.Context, in *LandPlayFourRequest, opts ...grpc.CallOption) (*LandPlayFourReply, error) {
	out := new(LandPlayFourReply)
	err := c.cc.Invoke(ctx, App_LandPlayFour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlayFive(ctx context.Context, in *LandPlayFiveRequest, opts ...grpc.CallOption) (*LandPlayFiveReply, error) {
	out := new(LandPlayFiveReply)
	err := c.cc.Invoke(ctx, App_LandPlayFive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlaySix(ctx context.Context, in *LandPlaySixRequest, opts ...grpc.CallOption) (*LandPlaySixReply, error) {
	out := new(LandPlaySixReply)
	err := c.cc.Invoke(ctx, App_LandPlaySix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LandPlaySeven(ctx context.Context, in *LandPlaySevenRequest, opts ...grpc.CallOption) (*LandPlaySevenReply, error) {
	out := new(LandPlaySevenReply)
	err := c.cc.Invoke(ctx, App_LandPlaySeven_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) SetGiw(ctx context.Context, in *SetGiwRequest, opts ...grpc.CallOption) (*SetGiwReply, error) {
	out := new(SetGiwReply)
	err := c.cc.Invoke(ctx, App_SetGiw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) SetGit(ctx context.Context, in *SetGitRequest, opts ...grpc.CallOption) (*SetGitReply, error) {
	out := new(SetGitReply)
	err := c.cc.Invoke(ctx, App_SetGit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) SetLand(ctx context.Context, in *SetLandRequest, opts ...grpc.CallOption) (*SetLandReply, error) {
	out := new(SetLandReply)
	err := c.cc.Invoke(ctx, App_SetLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginReply, error) {
	out := new(AdminLoginReply)
	err := c.cc.Invoke(ctx, App_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListReply, error) {
	out := new(AdminUserListReply)
	err := c.cc.Invoke(ctx, App_AdminUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserBuy(ctx context.Context, in *AdminUserBuyRequest, opts ...grpc.CallOption) (*AdminUserBuyReply, error) {
	out := new(AdminUserBuyReply)
	err := c.cc.Invoke(ctx, App_AdminUserBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserLand(ctx context.Context, in *AdminUserLandRequest, opts ...grpc.CallOption) (*AdminUserLandReply, error) {
	out := new(AdminUserLandReply)
	err := c.cc.Invoke(ctx, App_AdminUserLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminRewardListTwo(ctx context.Context, in *AdminRewardListTwoRequest, opts ...grpc.CallOption) (*AdminRewardListTwoReply, error) {
	out := new(AdminRewardListTwoReply)
	err := c.cc.Invoke(ctx, App_AdminRewardListTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...grpc.CallOption) (*AdminRewardListReply, error) {
	out := new(AdminRewardListReply)
	err := c.cc.Invoke(ctx, App_AdminRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserBackList(ctx context.Context, in *AdminUserBackListRequest, opts ...grpc.CallOption) (*AdminUserBackListReply, error) {
	out := new(AdminUserBackListReply)
	err := c.cc.Invoke(ctx, App_AdminUserBackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...grpc.CallOption) (*AdminUserRecommendReply, error) {
	out := new(AdminUserRecommendReply)
	err := c.cc.Invoke(ctx, App_AdminUserRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDeposit(ctx context.Context, in *AdminDepositRequest, opts ...grpc.CallOption) (*AdminDepositReply, error) {
	out := new(AdminDepositReply)
	err := c.cc.Invoke(ctx, App_AdminDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDepositUsdt(ctx context.Context, in *AdminDepositUsdtRequest, opts ...grpc.CallOption) (*AdminDepositUsdtReply, error) {
	out := new(AdminDepositUsdtReply)
	err := c.cc.Invoke(ctx, App_AdminDepositUsdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDepositUsdtTwo(ctx context.Context, in *AdminDepositUsdtTwoRequest, opts ...grpc.CallOption) (*AdminDepositUsdtTwoReply, error) {
	out := new(AdminDepositUsdtTwoReply)
	err := c.cc.Invoke(ctx, App_AdminDepositUsdtTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...grpc.CallOption) (*AdminWithdrawReply, error) {
	out := new(AdminWithdrawReply)
	err := c.cc.Invoke(ctx, App_AdminWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDaily(ctx context.Context, in *AdminDailyRequest, opts ...grpc.CallOption) (*AdminDailyReply, error) {
	out := new(AdminDailyReply)
	err := c.cc.Invoke(ctx, App_AdminDaily_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyReward(ctx context.Context, in *AdminDailyRewardRequest, opts ...grpc.CallOption) (*AdminDailyRewardReply, error) {
	out := new(AdminDailyRewardReply)
	err := c.cc.Invoke(ctx, App_AdminDailyReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminPriceChange(ctx context.Context, in *AdminPriceChangeRequest, opts ...grpc.CallOption) (*AdminPriceChangeReply, error) {
	out := new(AdminPriceChangeReply)
	err := c.cc.Invoke(ctx, App_AdminPriceChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...grpc.CallOption) (*AdminWithdrawListReply, error) {
	out := new(AdminWithdrawListReply)
	err := c.cc.Invoke(ctx, App_AdminWithdrawList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListReply, error) {
	out := new(RecordListReply)
	err := c.cc.Invoke(ctx, App_AdminRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLandConfigList(ctx context.Context, in *AdminLandConfigRequest, opts ...grpc.CallOption) (*AdminLandConfigReply, error) {
	out := new(AdminLandConfigReply)
	err := c.cc.Invoke(ctx, App_AdminLandConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLandConfigSet(ctx context.Context, in *AdminLandConfigSetRequest, opts ...grpc.CallOption) (*AdminLandConfigSetReply, error) {
	out := new(AdminLandConfigSetReply)
	err := c.cc.Invoke(ctx, App_AdminLandConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSeedConfigList(ctx context.Context, in *AdminSeedConfigRequest, opts ...grpc.CallOption) (*AdminSeedConfigReply, error) {
	out := new(AdminSeedConfigReply)
	err := c.cc.Invoke(ctx, App_AdminSeedConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSeedConfigSet(ctx context.Context, in *AdminSeedConfigSetRequest, opts ...grpc.CallOption) (*AdminSeedConfigSetReply, error) {
	out := new(AdminSeedConfigSetReply)
	err := c.cc.Invoke(ctx, App_AdminSeedConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminPropConfigList(ctx context.Context, in *AdminPropConfigRequest, opts ...grpc.CallOption) (*AdminPropConfigReply, error) {
	out := new(AdminPropConfigReply)
	err := c.cc.Invoke(ctx, App_AdminPropConfigList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminPropConfigSet(ctx context.Context, in *AdminPropConfigSetRequest, opts ...grpc.CallOption) (*AdminPropConfigSetReply, error) {
	out := new(AdminPropConfigSetReply)
	err := c.cc.Invoke(ctx, App_AdminPropConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetGiw(ctx context.Context, in *AdminSetGiwRequest, opts ...grpc.CallOption) (*AdminSetGiwReply, error) {
	out := new(AdminSetGiwReply)
	err := c.cc.Invoke(ctx, App_AdminSetGiw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetGit(ctx context.Context, in *AdminSetGitRequest, opts ...grpc.CallOption) (*AdminSetGitReply, error) {
	out := new(AdminSetGitReply)
	err := c.cc.Invoke(ctx, App_AdminSetGit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetUsdt(ctx context.Context, in *AdminSetUsdtRequest, opts ...grpc.CallOption) (*AdminSetUsdtReply, error) {
	out := new(AdminSetUsdtReply)
	err := c.cc.Invoke(ctx, App_AdminSetUsdt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminGetBox(ctx context.Context, in *AdminGetBoxRequest, opts ...grpc.CallOption) (*AdminGetBoxReply, error) {
	out := new(AdminGetBoxReply)
	err := c.cc.Invoke(ctx, App_AdminGetBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetBox(ctx context.Context, in *AdminSetBoxRequest, opts ...grpc.CallOption) (*AdminSetBoxReply, error) {
	out := new(AdminSetBoxReply)
	err := c.cc.Invoke(ctx, App_AdminSetBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminGetConfig(ctx context.Context, in *AdminGetConfigRequest, opts ...grpc.CallOption) (*AdminGetConfigReply, error) {
	out := new(AdminGetConfigReply)
	err := c.cc.Invoke(ctx, App_AdminGetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetConfig(ctx context.Context, in *AdminSetConfigRequest, opts ...grpc.CallOption) (*AdminSetConfigReply, error) {
	out := new(AdminSetConfigReply)
	err := c.cc.Invoke(ctx, App_AdminSetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetLand(ctx context.Context, in *AdminSetLandRequest, opts ...grpc.CallOption) (*AdminSetLandReply, error) {
	out := new(AdminSetLandReply)
	err := c.cc.Invoke(ctx, App_AdminSetLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetProp(ctx context.Context, in *AdminSetPropRequest, opts ...grpc.CallOption) (*AdminSetPropReply, error) {
	out := new(AdminSetPropReply)
	err := c.cc.Invoke(ctx, App_AdminSetProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetSeed(ctx context.Context, in *AdminSetSeedRequest, opts ...grpc.CallOption) (*AdminSetSeedReply, error) {
	out := new(AdminSetSeedReply)
	err := c.cc.Invoke(ctx, App_AdminSetSeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminSetBuyLand(ctx context.Context, in *AdminSetBuyLandRequest, opts ...grpc.CallOption) (*AdminSetBuyLandReply, error) {
	out := new(AdminSetBuyLandReply)
	err := c.cc.Invoke(ctx, App_AdminSetBuyLand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	TestSign(context.Context, *TestSignRequest) (*TestSignReply, error)
	EthAuthorize(context.Context, *EthAuthorizeRequest) (*EthAuthorizeReply, error)
	// 用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	// 直推列表
	UserRecommend(context.Context, *UserRecommendRequest) (*UserRecommendReply, error)
	// L1L2L3内容
	UserRecommendL(context.Context, *UserRecommendLRequest) (*UserRecommendLReply, error)
	// 土地背包列表
	UserLand(context.Context, *UserLandRequest) (*UserLandReply, error)
	// 粮仓列表
	UserStakeGitRewardList(context.Context, *UserStakeGitRewardListRequest) (*UserStakeGitRewardListReply, error)
	// 粮仓列表
	UserStakeGitStakeList(context.Context, *UserStakeGitStakeListRequest) (*UserStakeGitStakeListReply, error)
	// 盲盒列表
	UserBoxList(context.Context, *UserBoxListRequest) (*UserBoxListReply, error)
	// 仓库
	UserBackList(context.Context, *UserBackListRequest) (*UserBackListReply, error)
	// 市场 种子
	UserMarketSeedList(context.Context, *UserMarketSeedListRequest) (*UserMarketSeedListReply, error)
	// 市场 土地
	UserMarketLandList(context.Context, *UserMarketLandListRequest) (*UserMarketLandListReply, error)
	// 市场 道具
	UserMarketPropList(context.Context, *UserMarketPropListRequest) (*UserMarketPropListReply, error)
	// 市场 出租
	UserMarketRentLandList(context.Context, *UserMarketRentLandListRequest) (*UserMarketRentLandListReply, error)
	// 市场 我的
	UserMyMarketList(context.Context, *UserMyMarketListRequest) (*UserMyMarketListReply, error)
	// 通知
	UserNoticeList(context.Context, *UserNoticeListRequest) (*UserNoticeListReply, error)
	// 果实放大器 获奖记录
	UserStakeRewardList(context.Context, *UserStakeRewardListRequest) (*UserStakeRewardListReply, error)
	// 首页
	UserIndexList(context.Context, *UserIndexListRequest) (*UserIndexListReply, error)
	// 排行榜
	UserOrderList(context.Context, *UserOrderListRequest) (*UserOrderListReply, error)
	// 提现
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
	// 兑换
	Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error)
	// 合成土地
	GetLand(context.Context, *GetLandRequest) (*GetLandReply, error)
	// 粮仓的质押和赎回
	StakeGit(context.Context, *StakeGitRequest) (*StakeGitReply, error)
	// 购买盲盒
	BuyBox(context.Context, *BuyBoxRequest) (*BuyBoxReply, error)
	// 开盲盒
	OpenBox(context.Context, *OpenBoxRequest) (*OpenBoxReply, error)
	// 出售道具下架道具
	Sell(context.Context, *SellRequest) (*SellReply, error)
	// 购买道具
	Buy(context.Context, *BuyRequest) (*BuyReply, error)
	// 出租土地结束出租
	RentLand(context.Context, *RentLandRequest) (*RentLandReply, error)
	// 培育
	LandAddOutRate(context.Context, *LandAddOutRateRequest) (*LandAddOutRateReply, error)
	// 放大器质押解压
	StakeGet(context.Context, *StakeGetRequest) (*StakeGetReply, error)
	// 放大器游戏
	StakeGetPlay(context.Context, *StakeGetPlayRequest) (*StakeGetPlayReply, error)
	// 土地替换，收回
	LandPlay(context.Context, *LandPlayRequest) (*LandPlayReply, error)
	// 种植和出租的种植
	LandPlayOne(context.Context, *LandPlayOneRequest) (*LandPlayOneReply, error)
	// 收成熟植物和出租的
	LandPlayTwo(context.Context, *LandPlayTwoRequest) (*LandPlayTwoReply, error)
	// 施肥和出租的
	LandPlayThree(context.Context, *LandPlayThreeRequest) (*LandPlayThreeReply, error)
	// 杀虫和出租的
	LandPlayFour(context.Context, *LandPlayFourRequest) (*LandPlayFourReply, error)
	// 浇水和出租的
	LandPlayFive(context.Context, *LandPlayFiveRequest) (*LandPlayFiveReply, error)
	// 铲子铲别人
	LandPlaySix(context.Context, *LandPlaySixRequest) (*LandPlaySixReply, error)
	// 手套偷别人
	LandPlaySeven(context.Context, *LandPlaySevenRequest) (*LandPlaySevenReply, error)
	SetGiw(context.Context, *SetGiwRequest) (*SetGiwReply, error)
	SetGit(context.Context, *SetGitRequest) (*SetGitReply, error)
	SetLand(context.Context, *SetLandRequest) (*SetLandReply, error)
	// 登录
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error)
	// 用户
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error)
	// 管理认购信息
	AdminUserBuy(context.Context, *AdminUserBuyRequest) (*AdminUserBuyReply, error)
	// 管理土地信息
	AdminUserLand(context.Context, *AdminUserLandRequest) (*AdminUserLandReply, error)
	// 管理认购收益
	AdminRewardListTwo(context.Context, *AdminRewardListTwoRequest) (*AdminRewardListTwoReply, error)
	// 管理游戏收益
	AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error)
	// 管理仓库
	AdminUserBackList(context.Context, *AdminUserBackListRequest) (*AdminUserBackListReply, error)
	// 用户下级
	AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error)
	// 充值处理
	AdminDeposit(context.Context, *AdminDepositRequest) (*AdminDepositReply, error)
	// 充值处理
	AdminDepositUsdt(context.Context, *AdminDepositUsdtRequest) (*AdminDepositUsdtReply, error)
	// 充值处理
	AdminDepositUsdtTwo(context.Context, *AdminDepositUsdtTwoRequest) (*AdminDepositUsdtTwoReply, error)
	// 提现处理
	AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error)
	// 每日粮仓
	AdminDaily(context.Context, *AdminDailyRequest) (*AdminDailyReply, error)
	// 每日粮仓
	AdminDailyReward(context.Context, *AdminDailyRewardRequest) (*AdminDailyRewardReply, error)
	// 每日粮仓
	AdminPriceChange(context.Context, *AdminPriceChangeRequest) (*AdminPriceChangeReply, error)
	// 提现
	AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error)
	// 充值
	AdminRecordList(context.Context, *RecordListRequest) (*RecordListReply, error)
	// 土地配置
	AdminLandConfigList(context.Context, *AdminLandConfigRequest) (*AdminLandConfigReply, error)
	// 设置土地配置
	AdminLandConfigSet(context.Context, *AdminLandConfigSetRequest) (*AdminLandConfigSetReply, error)
	// 种子配置
	AdminSeedConfigList(context.Context, *AdminSeedConfigRequest) (*AdminSeedConfigReply, error)
	// 设置种子配置
	AdminSeedConfigSet(context.Context, *AdminSeedConfigSetRequest) (*AdminSeedConfigSetReply, error)
	// 道具配置
	AdminPropConfigList(context.Context, *AdminPropConfigRequest) (*AdminPropConfigReply, error)
	// 设置道具配置
	AdminPropConfigSet(context.Context, *AdminPropConfigSetRequest) (*AdminPropConfigSetReply, error)
	// 设置余额
	AdminSetGiw(context.Context, *AdminSetGiwRequest) (*AdminSetGiwReply, error)
	// 设置余额
	AdminSetGit(context.Context, *AdminSetGitRequest) (*AdminSetGitReply, error)
	// 设置余额
	AdminSetUsdt(context.Context, *AdminSetUsdtRequest) (*AdminSetUsdtReply, error)
	// 当前盲盒信息
	AdminGetBox(context.Context, *AdminGetBoxRequest) (*AdminGetBoxReply, error)
	// 设置盲盒
	AdminSetBox(context.Context, *AdminSetBoxRequest) (*AdminSetBoxReply, error)
	// 获取配置
	AdminGetConfig(context.Context, *AdminGetConfigRequest) (*AdminGetConfigReply, error)
	// 修改配置
	AdminSetConfig(context.Context, *AdminSetConfigRequest) (*AdminSetConfigReply, error)
	// 发土地
	AdminSetLand(context.Context, *AdminSetLandRequest) (*AdminSetLandReply, error)
	// 发道具
	AdminSetProp(context.Context, *AdminSetPropRequest) (*AdminSetPropReply, error)
	// 发种子
	AdminSetSeed(context.Context, *AdminSetSeedRequest) (*AdminSetSeedReply, error)
	// 上级拍卖行
	AdminSetBuyLand(context.Context, *AdminSetBuyLandRequest) (*AdminSetBuyLandReply, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) TestSign(context.Context, *TestSignRequest) (*TestSignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSign not implemented")
}
func (UnimplementedAppServer) EthAuthorize(context.Context, *EthAuthorizeRequest) (*EthAuthorizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthAuthorize not implemented")
}
func (UnimplementedAppServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedAppServer) UserRecommend(context.Context, *UserRecommendRequest) (*UserRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecommend not implemented")
}
func (UnimplementedAppServer) UserRecommendL(context.Context, *UserRecommendLRequest) (*UserRecommendLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecommendL not implemented")
}
func (UnimplementedAppServer) UserLand(context.Context, *UserLandRequest) (*UserLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLand not implemented")
}
func (UnimplementedAppServer) UserStakeGitRewardList(context.Context, *UserStakeGitRewardListRequest) (*UserStakeGitRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStakeGitRewardList not implemented")
}
func (UnimplementedAppServer) UserStakeGitStakeList(context.Context, *UserStakeGitStakeListRequest) (*UserStakeGitStakeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStakeGitStakeList not implemented")
}
func (UnimplementedAppServer) UserBoxList(context.Context, *UserBoxListRequest) (*UserBoxListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBoxList not implemented")
}
func (UnimplementedAppServer) UserBackList(context.Context, *UserBackListRequest) (*UserBackListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBackList not implemented")
}
func (UnimplementedAppServer) UserMarketSeedList(context.Context, *UserMarketSeedListRequest) (*UserMarketSeedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMarketSeedList not implemented")
}
func (UnimplementedAppServer) UserMarketLandList(context.Context, *UserMarketLandListRequest) (*UserMarketLandListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMarketLandList not implemented")
}
func (UnimplementedAppServer) UserMarketPropList(context.Context, *UserMarketPropListRequest) (*UserMarketPropListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMarketPropList not implemented")
}
func (UnimplementedAppServer) UserMarketRentLandList(context.Context, *UserMarketRentLandListRequest) (*UserMarketRentLandListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMarketRentLandList not implemented")
}
func (UnimplementedAppServer) UserMyMarketList(context.Context, *UserMyMarketListRequest) (*UserMyMarketListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMyMarketList not implemented")
}
func (UnimplementedAppServer) UserNoticeList(context.Context, *UserNoticeListRequest) (*UserNoticeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNoticeList not implemented")
}
func (UnimplementedAppServer) UserStakeRewardList(context.Context, *UserStakeRewardListRequest) (*UserStakeRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStakeRewardList not implemented")
}
func (UnimplementedAppServer) UserIndexList(context.Context, *UserIndexListRequest) (*UserIndexListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIndexList not implemented")
}
func (UnimplementedAppServer) UserOrderList(context.Context, *UserOrderListRequest) (*UserOrderListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOrderList not implemented")
}
func (UnimplementedAppServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedAppServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedAppServer) GetLand(context.Context, *GetLandRequest) (*GetLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLand not implemented")
}
func (UnimplementedAppServer) StakeGit(context.Context, *StakeGitRequest) (*StakeGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeGit not implemented")
}
func (UnimplementedAppServer) BuyBox(context.Context, *BuyBoxRequest) (*BuyBoxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyBox not implemented")
}
func (UnimplementedAppServer) OpenBox(context.Context, *OpenBoxRequest) (*OpenBoxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBox not implemented")
}
func (UnimplementedAppServer) Sell(context.Context, *SellRequest) (*SellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedAppServer) Buy(context.Context, *BuyRequest) (*BuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedAppServer) RentLand(context.Context, *RentLandRequest) (*RentLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentLand not implemented")
}
func (UnimplementedAppServer) LandAddOutRate(context.Context, *LandAddOutRateRequest) (*LandAddOutRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandAddOutRate not implemented")
}
func (UnimplementedAppServer) StakeGet(context.Context, *StakeGetRequest) (*StakeGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeGet not implemented")
}
func (UnimplementedAppServer) StakeGetPlay(context.Context, *StakeGetPlayRequest) (*StakeGetPlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeGetPlay not implemented")
}
func (UnimplementedAppServer) LandPlay(context.Context, *LandPlayRequest) (*LandPlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlay not implemented")
}
func (UnimplementedAppServer) LandPlayOne(context.Context, *LandPlayOneRequest) (*LandPlayOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlayOne not implemented")
}
func (UnimplementedAppServer) LandPlayTwo(context.Context, *LandPlayTwoRequest) (*LandPlayTwoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlayTwo not implemented")
}
func (UnimplementedAppServer) LandPlayThree(context.Context, *LandPlayThreeRequest) (*LandPlayThreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlayThree not implemented")
}
func (UnimplementedAppServer) LandPlayFour(context.Context, *LandPlayFourRequest) (*LandPlayFourReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlayFour not implemented")
}
func (UnimplementedAppServer) LandPlayFive(context.Context, *LandPlayFiveRequest) (*LandPlayFiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlayFive not implemented")
}
func (UnimplementedAppServer) LandPlaySix(context.Context, *LandPlaySixRequest) (*LandPlaySixReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlaySix not implemented")
}
func (UnimplementedAppServer) LandPlaySeven(context.Context, *LandPlaySevenRequest) (*LandPlaySevenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandPlaySeven not implemented")
}
func (UnimplementedAppServer) SetGiw(context.Context, *SetGiwRequest) (*SetGiwReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGiw not implemented")
}
func (UnimplementedAppServer) SetGit(context.Context, *SetGitRequest) (*SetGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGit not implemented")
}
func (UnimplementedAppServer) SetLand(context.Context, *SetLandRequest) (*SetLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLand not implemented")
}
func (UnimplementedAppServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAppServer) AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserList not implemented")
}
func (UnimplementedAppServer) AdminUserBuy(context.Context, *AdminUserBuyRequest) (*AdminUserBuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserBuy not implemented")
}
func (UnimplementedAppServer) AdminUserLand(context.Context, *AdminUserLandRequest) (*AdminUserLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserLand not implemented")
}
func (UnimplementedAppServer) AdminRewardListTwo(context.Context, *AdminRewardListTwoRequest) (*AdminRewardListTwoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRewardListTwo not implemented")
}
func (UnimplementedAppServer) AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRewardList not implemented")
}
func (UnimplementedAppServer) AdminUserBackList(context.Context, *AdminUserBackListRequest) (*AdminUserBackListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserBackList not implemented")
}
func (UnimplementedAppServer) AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserRecommend not implemented")
}
func (UnimplementedAppServer) AdminDeposit(context.Context, *AdminDepositRequest) (*AdminDepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeposit not implemented")
}
func (UnimplementedAppServer) AdminDepositUsdt(context.Context, *AdminDepositUsdtRequest) (*AdminDepositUsdtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDepositUsdt not implemented")
}
func (UnimplementedAppServer) AdminDepositUsdtTwo(context.Context, *AdminDepositUsdtTwoRequest) (*AdminDepositUsdtTwoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDepositUsdtTwo not implemented")
}
func (UnimplementedAppServer) AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdraw not implemented")
}
func (UnimplementedAppServer) AdminDaily(context.Context, *AdminDailyRequest) (*AdminDailyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDaily not implemented")
}
func (UnimplementedAppServer) AdminDailyReward(context.Context, *AdminDailyRewardRequest) (*AdminDailyRewardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyReward not implemented")
}
func (UnimplementedAppServer) AdminPriceChange(context.Context, *AdminPriceChangeRequest) (*AdminPriceChangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPriceChange not implemented")
}
func (UnimplementedAppServer) AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdrawList not implemented")
}
func (UnimplementedAppServer) AdminRecordList(context.Context, *RecordListRequest) (*RecordListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRecordList not implemented")
}
func (UnimplementedAppServer) AdminLandConfigList(context.Context, *AdminLandConfigRequest) (*AdminLandConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLandConfigList not implemented")
}
func (UnimplementedAppServer) AdminLandConfigSet(context.Context, *AdminLandConfigSetRequest) (*AdminLandConfigSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLandConfigSet not implemented")
}
func (UnimplementedAppServer) AdminSeedConfigList(context.Context, *AdminSeedConfigRequest) (*AdminSeedConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSeedConfigList not implemented")
}
func (UnimplementedAppServer) AdminSeedConfigSet(context.Context, *AdminSeedConfigSetRequest) (*AdminSeedConfigSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSeedConfigSet not implemented")
}
func (UnimplementedAppServer) AdminPropConfigList(context.Context, *AdminPropConfigRequest) (*AdminPropConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPropConfigList not implemented")
}
func (UnimplementedAppServer) AdminPropConfigSet(context.Context, *AdminPropConfigSetRequest) (*AdminPropConfigSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPropConfigSet not implemented")
}
func (UnimplementedAppServer) AdminSetGiw(context.Context, *AdminSetGiwRequest) (*AdminSetGiwReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetGiw not implemented")
}
func (UnimplementedAppServer) AdminSetGit(context.Context, *AdminSetGitRequest) (*AdminSetGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetGit not implemented")
}
func (UnimplementedAppServer) AdminSetUsdt(context.Context, *AdminSetUsdtRequest) (*AdminSetUsdtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetUsdt not implemented")
}
func (UnimplementedAppServer) AdminGetBox(context.Context, *AdminGetBoxRequest) (*AdminGetBoxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetBox not implemented")
}
func (UnimplementedAppServer) AdminSetBox(context.Context, *AdminSetBoxRequest) (*AdminSetBoxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetBox not implemented")
}
func (UnimplementedAppServer) AdminGetConfig(context.Context, *AdminGetConfigRequest) (*AdminGetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetConfig not implemented")
}
func (UnimplementedAppServer) AdminSetConfig(context.Context, *AdminSetConfigRequest) (*AdminSetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetConfig not implemented")
}
func (UnimplementedAppServer) AdminSetLand(context.Context, *AdminSetLandRequest) (*AdminSetLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetLand not implemented")
}
func (UnimplementedAppServer) AdminSetProp(context.Context, *AdminSetPropRequest) (*AdminSetPropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetProp not implemented")
}
func (UnimplementedAppServer) AdminSetSeed(context.Context, *AdminSetSeedRequest) (*AdminSetSeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetSeed not implemented")
}
func (UnimplementedAppServer) AdminSetBuyLand(context.Context, *AdminSetBuyLandRequest) (*AdminSetBuyLandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetBuyLand not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_TestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).TestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_TestSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).TestSign(ctx, req.(*TestSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_EthAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).EthAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_EthAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).EthAuthorize(ctx, req.(*EthAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserRecommend(ctx, req.(*UserRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserRecommendL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRecommendLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserRecommendL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserRecommendL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserRecommendL(ctx, req.(*UserRecommendLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserLand(ctx, req.(*UserLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserStakeGitRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStakeGitRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserStakeGitRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserStakeGitRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserStakeGitRewardList(ctx, req.(*UserStakeGitRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserStakeGitStakeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStakeGitStakeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserStakeGitStakeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserStakeGitStakeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserStakeGitStakeList(ctx, req.(*UserStakeGitStakeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserBoxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBoxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserBoxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserBoxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserBoxList(ctx, req.(*UserBoxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserBackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserBackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserBackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserBackList(ctx, req.(*UserBackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserMarketSeedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMarketSeedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserMarketSeedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserMarketSeedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserMarketSeedList(ctx, req.(*UserMarketSeedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserMarketLandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMarketLandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserMarketLandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserMarketLandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserMarketLandList(ctx, req.(*UserMarketLandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserMarketPropList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMarketPropListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserMarketPropList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserMarketPropList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserMarketPropList(ctx, req.(*UserMarketPropListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserMarketRentLandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMarketRentLandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserMarketRentLandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserMarketRentLandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserMarketRentLandList(ctx, req.(*UserMarketRentLandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserMyMarketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMyMarketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserMyMarketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserMyMarketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserMyMarketList(ctx, req.(*UserMyMarketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserNoticeList(ctx, req.(*UserNoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserStakeRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStakeRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserStakeRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserStakeRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserStakeRewardList(ctx, req.(*UserStakeRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserIndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIndexListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserIndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserIndexList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserIndexList(ctx, req.(*UserIndexListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_UserOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserOrderList(ctx, req.(*UserOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Exchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_GetLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetLand(ctx, req.(*GetLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_StakeGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).StakeGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_StakeGit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).StakeGit(ctx, req.(*StakeGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_BuyBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).BuyBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_BuyBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).BuyBox(ctx, req.(*BuyBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_OpenBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).OpenBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_OpenBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).OpenBox(ctx, req.(*OpenBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Sell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Sell(ctx, req.(*SellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_RentLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).RentLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_RentLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).RentLand(ctx, req.(*RentLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandAddOutRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandAddOutRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandAddOutRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandAddOutRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandAddOutRate(ctx, req.(*LandAddOutRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_StakeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).StakeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_StakeGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).StakeGet(ctx, req.(*StakeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_StakeGetPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeGetPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).StakeGetPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_StakeGetPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).StakeGetPlay(ctx, req.(*StakeGetPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlay(ctx, req.(*LandPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlayOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlayOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlayOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlayOne(ctx, req.(*LandPlayOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlayTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlayTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlayTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlayTwo(ctx, req.(*LandPlayTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlayThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlayThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlayThree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlayThree(ctx, req.(*LandPlayThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlayFour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayFourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlayFour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlayFour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlayFour(ctx, req.(*LandPlayFourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlayFive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlayFiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlayFive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlayFive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlayFive(ctx, req.(*LandPlayFiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlaySix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlaySixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlaySix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlaySix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlaySix(ctx, req.(*LandPlaySixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LandPlaySeven_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandPlaySevenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LandPlaySeven(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_LandPlaySeven_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LandPlaySeven(ctx, req.(*LandPlaySevenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_SetGiw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGiwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).SetGiw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_SetGiw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).SetGiw(ctx, req.(*SetGiwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_SetGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).SetGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_SetGit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).SetGit(ctx, req.(*SetGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_SetLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).SetLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_SetLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).SetLand(ctx, req.(*SetLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserList(ctx, req.(*AdminUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminUserBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserBuy(ctx, req.(*AdminUserBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminUserLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserLand(ctx, req.(*AdminUserLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminRewardListTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRewardListTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminRewardListTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminRewardListTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminRewardListTwo(ctx, req.(*AdminRewardListTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminRewardList(ctx, req.(*AdminRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserBackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserBackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserBackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminUserBackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserBackList(ctx, req.(*AdminUserBackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminUserRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserRecommend(ctx, req.(*AdminUserRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDeposit(ctx, req.(*AdminDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDepositUsdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDepositUsdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDepositUsdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminDepositUsdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDepositUsdt(ctx, req.(*AdminDepositUsdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDepositUsdtTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDepositUsdtTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDepositUsdtTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminDepositUsdtTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDepositUsdtTwo(ctx, req.(*AdminDepositUsdtTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdraw(ctx, req.(*AdminWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDaily(ctx, req.(*AdminDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminDailyReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyReward(ctx, req.(*AdminDailyRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminPriceChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPriceChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminPriceChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminPriceChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminPriceChange(ctx, req.(*AdminPriceChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdrawList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdrawList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminWithdrawList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdrawList(ctx, req.(*AdminWithdrawListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminRecordList(ctx, req.(*RecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLandConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLandConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLandConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminLandConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLandConfigList(ctx, req.(*AdminLandConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLandConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLandConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLandConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminLandConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLandConfigSet(ctx, req.(*AdminLandConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSeedConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSeedConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSeedConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSeedConfigList(ctx, req.(*AdminSeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSeedConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSeedConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSeedConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSeedConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSeedConfigSet(ctx, req.(*AdminSeedConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminPropConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPropConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminPropConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminPropConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminPropConfigList(ctx, req.(*AdminPropConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminPropConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPropConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminPropConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminPropConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminPropConfigSet(ctx, req.(*AdminPropConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetGiw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetGiwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetGiw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetGiw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetGiw(ctx, req.(*AdminSetGiwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetGit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetGit(ctx, req.(*AdminSetGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetUsdt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetUsdtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetUsdt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetUsdt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetUsdt(ctx, req.(*AdminSetUsdtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminGetBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminGetBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminGetBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminGetBox(ctx, req.(*AdminGetBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetBox(ctx, req.(*AdminSetBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminGetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminGetConfig(ctx, req.(*AdminGetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetConfig(ctx, req.(*AdminSetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetLand(ctx, req.(*AdminSetLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetPropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetProp(ctx, req.(*AdminSetPropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetSeed(ctx, req.(*AdminSetSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminSetBuyLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetBuyLandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminSetBuyLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_AdminSetBuyLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminSetBuyLand(ctx, req.(*AdminSetBuyLandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.app.v1.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestSign",
			Handler:    _App_TestSign_Handler,
		},
		{
			MethodName: "EthAuthorize",
			Handler:    _App_EthAuthorize_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _App_UserInfo_Handler,
		},
		{
			MethodName: "UserRecommend",
			Handler:    _App_UserRecommend_Handler,
		},
		{
			MethodName: "UserRecommendL",
			Handler:    _App_UserRecommendL_Handler,
		},
		{
			MethodName: "UserLand",
			Handler:    _App_UserLand_Handler,
		},
		{
			MethodName: "UserStakeGitRewardList",
			Handler:    _App_UserStakeGitRewardList_Handler,
		},
		{
			MethodName: "UserStakeGitStakeList",
			Handler:    _App_UserStakeGitStakeList_Handler,
		},
		{
			MethodName: "UserBoxList",
			Handler:    _App_UserBoxList_Handler,
		},
		{
			MethodName: "UserBackList",
			Handler:    _App_UserBackList_Handler,
		},
		{
			MethodName: "UserMarketSeedList",
			Handler:    _App_UserMarketSeedList_Handler,
		},
		{
			MethodName: "UserMarketLandList",
			Handler:    _App_UserMarketLandList_Handler,
		},
		{
			MethodName: "UserMarketPropList",
			Handler:    _App_UserMarketPropList_Handler,
		},
		{
			MethodName: "UserMarketRentLandList",
			Handler:    _App_UserMarketRentLandList_Handler,
		},
		{
			MethodName: "UserMyMarketList",
			Handler:    _App_UserMyMarketList_Handler,
		},
		{
			MethodName: "UserNoticeList",
			Handler:    _App_UserNoticeList_Handler,
		},
		{
			MethodName: "UserStakeRewardList",
			Handler:    _App_UserStakeRewardList_Handler,
		},
		{
			MethodName: "UserIndexList",
			Handler:    _App_UserIndexList_Handler,
		},
		{
			MethodName: "UserOrderList",
			Handler:    _App_UserOrderList_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _App_Withdraw_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _App_Exchange_Handler,
		},
		{
			MethodName: "GetLand",
			Handler:    _App_GetLand_Handler,
		},
		{
			MethodName: "StakeGit",
			Handler:    _App_StakeGit_Handler,
		},
		{
			MethodName: "BuyBox",
			Handler:    _App_BuyBox_Handler,
		},
		{
			MethodName: "OpenBox",
			Handler:    _App_OpenBox_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _App_Sell_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _App_Buy_Handler,
		},
		{
			MethodName: "RentLand",
			Handler:    _App_RentLand_Handler,
		},
		{
			MethodName: "LandAddOutRate",
			Handler:    _App_LandAddOutRate_Handler,
		},
		{
			MethodName: "StakeGet",
			Handler:    _App_StakeGet_Handler,
		},
		{
			MethodName: "StakeGetPlay",
			Handler:    _App_StakeGetPlay_Handler,
		},
		{
			MethodName: "LandPlay",
			Handler:    _App_LandPlay_Handler,
		},
		{
			MethodName: "LandPlayOne",
			Handler:    _App_LandPlayOne_Handler,
		},
		{
			MethodName: "LandPlayTwo",
			Handler:    _App_LandPlayTwo_Handler,
		},
		{
			MethodName: "LandPlayThree",
			Handler:    _App_LandPlayThree_Handler,
		},
		{
			MethodName: "LandPlayFour",
			Handler:    _App_LandPlayFour_Handler,
		},
		{
			MethodName: "LandPlayFive",
			Handler:    _App_LandPlayFive_Handler,
		},
		{
			MethodName: "LandPlaySix",
			Handler:    _App_LandPlaySix_Handler,
		},
		{
			MethodName: "LandPlaySeven",
			Handler:    _App_LandPlaySeven_Handler,
		},
		{
			MethodName: "SetGiw",
			Handler:    _App_SetGiw_Handler,
		},
		{
			MethodName: "SetGit",
			Handler:    _App_SetGit_Handler,
		},
		{
			MethodName: "SetLand",
			Handler:    _App_SetLand_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _App_AdminLogin_Handler,
		},
		{
			MethodName: "AdminUserList",
			Handler:    _App_AdminUserList_Handler,
		},
		{
			MethodName: "AdminUserBuy",
			Handler:    _App_AdminUserBuy_Handler,
		},
		{
			MethodName: "AdminUserLand",
			Handler:    _App_AdminUserLand_Handler,
		},
		{
			MethodName: "AdminRewardListTwo",
			Handler:    _App_AdminRewardListTwo_Handler,
		},
		{
			MethodName: "AdminRewardList",
			Handler:    _App_AdminRewardList_Handler,
		},
		{
			MethodName: "AdminUserBackList",
			Handler:    _App_AdminUserBackList_Handler,
		},
		{
			MethodName: "AdminUserRecommend",
			Handler:    _App_AdminUserRecommend_Handler,
		},
		{
			MethodName: "AdminDeposit",
			Handler:    _App_AdminDeposit_Handler,
		},
		{
			MethodName: "AdminDepositUsdt",
			Handler:    _App_AdminDepositUsdt_Handler,
		},
		{
			MethodName: "AdminDepositUsdtTwo",
			Handler:    _App_AdminDepositUsdtTwo_Handler,
		},
		{
			MethodName: "AdminWithdraw",
			Handler:    _App_AdminWithdraw_Handler,
		},
		{
			MethodName: "AdminDaily",
			Handler:    _App_AdminDaily_Handler,
		},
		{
			MethodName: "AdminDailyReward",
			Handler:    _App_AdminDailyReward_Handler,
		},
		{
			MethodName: "AdminPriceChange",
			Handler:    _App_AdminPriceChange_Handler,
		},
		{
			MethodName: "AdminWithdrawList",
			Handler:    _App_AdminWithdrawList_Handler,
		},
		{
			MethodName: "AdminRecordList",
			Handler:    _App_AdminRecordList_Handler,
		},
		{
			MethodName: "AdminLandConfigList",
			Handler:    _App_AdminLandConfigList_Handler,
		},
		{
			MethodName: "AdminLandConfigSet",
			Handler:    _App_AdminLandConfigSet_Handler,
		},
		{
			MethodName: "AdminSeedConfigList",
			Handler:    _App_AdminSeedConfigList_Handler,
		},
		{
			MethodName: "AdminSeedConfigSet",
			Handler:    _App_AdminSeedConfigSet_Handler,
		},
		{
			MethodName: "AdminPropConfigList",
			Handler:    _App_AdminPropConfigList_Handler,
		},
		{
			MethodName: "AdminPropConfigSet",
			Handler:    _App_AdminPropConfigSet_Handler,
		},
		{
			MethodName: "AdminSetGiw",
			Handler:    _App_AdminSetGiw_Handler,
		},
		{
			MethodName: "AdminSetGit",
			Handler:    _App_AdminSetGit_Handler,
		},
		{
			MethodName: "AdminSetUsdt",
			Handler:    _App_AdminSetUsdt_Handler,
		},
		{
			MethodName: "AdminGetBox",
			Handler:    _App_AdminGetBox_Handler,
		},
		{
			MethodName: "AdminSetBox",
			Handler:    _App_AdminSetBox_Handler,
		},
		{
			MethodName: "AdminGetConfig",
			Handler:    _App_AdminGetConfig_Handler,
		},
		{
			MethodName: "AdminSetConfig",
			Handler:    _App_AdminSetConfig_Handler,
		},
		{
			MethodName: "AdminSetLand",
			Handler:    _App_AdminSetLand_Handler,
		},
		{
			MethodName: "AdminSetProp",
			Handler:    _App_AdminSetProp_Handler,
		},
		{
			MethodName: "AdminSetSeed",
			Handler:    _App_AdminSetSeed_Handler,
		},
		{
			MethodName: "AdminSetBuyLand",
			Handler:    _App_AdminSetBuyLand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/v1/app.proto",
}
